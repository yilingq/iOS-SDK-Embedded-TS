// Generated by Swift version 1.1 (swift-600.0.56.1)
#pragma clang diagnostic push

#if defined(__has_include) && __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if defined(__has_include) && __has_include(<uchar.h>)
# include <uchar.h>
#elif !defined(__cplusplus) || __cplusplus < 201103L
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
#endif

typedef struct _NSZone NSZone;

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif

#if defined(__has_attribute) && __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if defined(__has_attribute) && __has_attribute(objc_subclassing_restricted) 
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if defined(__has_attribute) && __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if defined(__has_feature) && __has_feature(modules)
@import ObjectiveC;
@import Foundation;
#endif

#import <CreditCardHandler/CreditCardHandler.h>

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
@class TransactionEMVInfoVO;
@class GeneralInfoVO;

SWIFT_CLASS("_TtC17CreditCardHandler19IJCreditCardHandler")
@interface IJCreditCardHandler : NSObject <RBA_SDK_Event_support, LogTrace_support>
@property (nonatomic, copy) NSString * ComPort;
@property (nonatomic, readonly) TransactionEMVInfoVO * EMVInfo;
@property (nonatomic, readonly, copy) NSString * Track1Data;
@property (nonatomic, readonly, copy) NSString * TrackData2;
@property (nonatomic, readonly, copy) NSString * TrackData3;
@property (nonatomic, readonly) BOOL IsChipPinCard;
@property (nonatomic, readonly) BOOL IsValidCreditCard;
@property (nonatomic) GeneralInfoVO * GeneralInfomation;
@property (nonatomic, readonly, copy) NSString * CardSource;
@property (nonatomic) BOOL SaveTransaction;
- (void)ProcessPinPadParameters:(NSInteger)messageId;
- (void)LogTraceOut:(NSString *)line;
- (void)StopTransaction;
- (NSString *)GetErrorDescription:(NSString *)errorCode;
- (NSString *)GetDeclineReasons:(NSString *)result;
- (BOOL)initializeSDK:(NSInteger)level;
- (BOOL)StartSwipedTransaction;
- (BOOL)StartNFCTransaction;
- (BOOL)StartSwipedTransaction:(NSInteger)type amt:(NSString *)amt currency:(NSString *)currency itemId:(int)itemId seatNum:(NSString *)seatNum fareClass:(NSString *)fareClass ffStatus:(NSString *)ffStatus;
- (BOOL)StartNFCTransaction:(NSInteger)type amt:(NSString *)amt currency:(NSString *)currency itemId:(int)itemId seatNum:(NSString *)seatNum fareClass:(NSString *)fareClass ffStatus:(NSString *)ffStatus;
- (BOOL)StartEMVTransaction:(NSInteger)type amt:(NSString *)amt currency:(NSString *)currency itemId:(int)itemId seatNum:(NSString *)seatNum fareClass:(NSString *)fareClass ffStatus:(NSString *)ffStatus;
- (instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface NSData (SWIFT_EXTENSION(CreditCardHandler))
@end


@interface NSThread (SWIFT_EXTENSION(CreditCardHandler))
@end


SWIFT_CLASS("_TtC17CreditCardHandler20TransactionEMVInfoVO")
@interface TransactionEMVInfoVO : NSObject
@property (nonatomic, copy) NSString * EMVTrack2;
@property (nonatomic, copy) NSString * EMVCardApplicationIdentifier;
@property (nonatomic, copy) NSString * EMVCardIssuerScriptTemplate1;
@property (nonatomic, copy) NSString * EMVCardIssuerScriptTemplate2;
@property (nonatomic, copy) NSString * EMVCardApplicationInterchangeProfile;
@property (nonatomic, copy) NSString * EMVCardDedicatedFileName;
@property (nonatomic, copy) NSString * EMVCardAuthorizationResponseCode;
@property (nonatomic, copy) NSString * EMVCardIssuerAuthenticationData;
@property (nonatomic, copy) NSString * EMVCardTerminalVerificationResults;
@property (nonatomic, copy) NSString * EMVTransactionDate;
@property (nonatomic, copy) NSString * EMVTransactionStatusInformation;
@property (nonatomic, copy) NSString * EMVCryptogramTransactionType;
@property (nonatomic, copy) NSString * EMVIssuerCountryCode;
@property (nonatomic, copy) NSString * EMVTransactionCurrencyCode;
@property (nonatomic, copy) NSString * EMVTransactionAmount;
@property (nonatomic, copy) NSString * EMVApplicationUsageControl;
@property (nonatomic, copy) NSString * EMVApplicationVersionNumber;
@property (nonatomic, copy) NSString * EMVIssuerActionCodeDenial;
@property (nonatomic, copy) NSString * EMVIssuerActionCodeOnline;
@property (nonatomic, copy) NSString * EMVIssuerActionCodeDefault;
@property (nonatomic, copy) NSString * EMVIssuerApplicationData;
@property (nonatomic, copy) NSString * EMVTerminalCountryCode;
@property (nonatomic, copy) NSString * EMVInterfaceDeviceSerialNumber;
@property (nonatomic, copy) NSString * EMVApplicationCryptogram;
@property (nonatomic, copy) NSString * EMVCryptogramInformationData;
@property (nonatomic, copy) NSString * EMVTerminalCapabilities;
@property (nonatomic, copy) NSString * EMVCardholderVerificationMethodResults;
@property (nonatomic, copy) NSString * EMVTerminalType;
@property (nonatomic, copy) NSString * EMVApplicationTransactionCounter;
@property (nonatomic, copy) NSString * EMVUnpredictableNumber;
@property (nonatomic, copy) NSString * EMVTransactionSequenceCounterID;
@property (nonatomic, copy) NSString * EMVApplicationCurrencyCode;
@property (nonatomic, copy) NSString * EMVTransactionCategoryCode;
@property (nonatomic, copy) NSString * EMVIssuerScriptResults;
@property (nonatomic, copy) NSString * EMVPanSequenceNumber;
@property (nonatomic, copy) NSString * EMVServiceCode;
@property (nonatomic, copy) NSString * EMVShortFileIdentifier;
@property (nonatomic, copy) NSString * NonEMVPinEntryRequired;
@property (nonatomic, copy) NSString * NonEMVSignatureRequired;
@property (nonatomic, copy) NSString * NonEMVConfirmationResponseCode;
@property (nonatomic, copy) NSString * NonEMVTransactionType;
@property (nonatomic, copy) NSString * NonEMVCardPaymentCode;
@property (nonatomic, copy) NSString * NonEMVCardEntryCode;
@property (nonatomic, copy) NSString * NonEMVErrorResponseCode;
- (instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

#pragma clang diagnostic pop
